ES6函数

1.默认参数
ES6可以再定义函数的时候指定参数的默认值了，不用像以前一样通过逻辑或操作符达到目的
function sayHello(name){
	//传统的指定默认参数的方式
	var name = name||"chenkaixin";
	document.write('hello'+name);
}
function sayHelloNew(name = "zhangbaisong"){
	document.write(`hello ${name}`);
}
sayHello()//输出 hello chenkaixin sayHelloNew()//输出hello zhangbaisong 
sayHello(123)输出 hello 123 sayHelloNew(123)//输出hello 123

2.rest参数（形式为...变量名），可以称为不定参数，用于获取函数的多余参数，这样就不用使用arguments对象了
rest参数搭配的变量是一个数组，该变量将多余的参数放在数组中
function add(...values){
	let sum = 0;
	for(var val of values){
		sum+=val;
	}
	return sum;
} add(1,2,3) // 6

3.扩展运算符
扩展运算符（spread）是三个点（...）。它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。
该运算符主要用以函数调用
它允许传递数组或类数组直接作为函数的参数而不用通过apply。
ES5如果需要传递数组当参数，则需要使用函数的apply方法
实例：
var people = ['张三','李四','王五'];
//sayHello函数本来接受三个单独的参数,people1,people2,和people3
function sayHello(people1,people2,people3){
	document.write('hello'+${people1},${people2},${people3});
}
//ES6中我们将一个数组以拓展参数的形式传递，他能很好的映射到每个单独的参数。
sayHello(...people);
//而在以前，如果需要传递数组当参数，我们需要使用函数的apply方法
sayHello.apply(null,people);

4.箭头函数
箭头函数是使用=>语法的函数简写方式
同时支持表达式体和与语句体，与普通的函数所不同的是，箭头函数与其上下文中的代码共享同一个具有词法作用域的this

5.函数绑定
函数绑定运算符是并排的两个冒号（::），左边是一个对象，右边是一个函数。
该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右面的函数上
例如
foo::bar 等同于 bar.call(foo);

6.尾调用优化
什么是尾调用？
尾调用的概念非常简单，就是指某函数的最后一步是调用另一个函数
function f(x){ return g(x)}
