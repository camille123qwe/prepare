1.Set 基本用法
数据结构set 类似于数组，但是成员的值都是唯一的，没有重复的值。
var s = new Set();
[1,2,2,2,3,4,5,3,3,4].map(x=>s.add(x)) 
for(i of s){document.write (i)} //1,2,3,4,5
set 函数可以接受一个数组作为参数，用来初始化
var items = new Set([1,2,3,4,4,4,4,4,4]); document.write(items.size) //4
向set加入值得时候，不会发生类型转换，所以5和“5”是两个不同的值.同理。对象和数组也是一样

2.Set实例的属性
Set结构的实例有以下属性。
Set.prototype.constructor: 构造函数，默认是Set函数。
Set.prototype.size : 返回Set实例的成员总数
set 实例的方法

3.Set实例的方法分为两大类，操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法
add():添加某个值，返回set结构本身。
delete() :删除某个值，返回一个布尔值，表示删除是否成功
has() :返回一个布尔值，表示该值是否为set的成员。
clear() :清除所有成员，没有返回值。
Array.from方法可以将set结构转为数组

4.Set结构的实例有四个遍历的方法，可以用于遍历成员。
keys():返回一个键名的遍历器
values():返回一个键值的遍历器
entries() 返回一个键值对的遍历器
forEach() ：使用回调函数遍历每个成员
示例：
var set= new Set(['red','green','blue']);
for(let item of set.values()){document.write(item)}//由于set结构没有键名，只有键值，所以key方法和value方法的行为完全一致
for(let item of set.entries()) //item ['red':'red'];
set.forEach(function(item){document.write(item)})

5.WeakSet
WeakSet和Set一样都不能存储重复的元素，但是WeakSet的值只能是对象，不能是其他类型的值
WeakSet结构有以下三个方法
WeakSet.prototype.add(value):向WeakSet添加一个新成员
weakSet.prototype.delete(value):清除WeakSet实例的指定成员
WeakSet.prototype.has(value): 返回一个布尔值，表示某个值是否存在
WeakSet没有size属性，没有办法遍历它的成员
 