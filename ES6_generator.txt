Generator函数
1.Generator函数是一个函数内部状态的遍历器（也就是说，Generator函数是一个状态机）。
形式上，Generator函数是一个普通函数，但是有两个特征。
一是，function命令与函数名之间有一个星号
而是 函数体内部使用yield语句，定义遍历器的每个成员，即不同的内部状态
function* generator(){
	yield "hello";
	yield "world";
	return "ending";
}
var hw = generator();
hw.next() //{value:'hello',done:false}
hw.next()//{value:"world",done:false}
hw.next()//{value:"ending",done:true}
hw.next()//{value:"undefined",done:true}
调用Generator函数，返回一个部署了Iterator接口的遍历器对象，用来操作内部指针。
以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。
value属性表示当前内部状态的值，是yield语句后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束

2.next方法的参数
yield语句本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当做上一个yield语句的返回值

3.for....of循环
for...of循环可以自动遍历Generator函数，且此时不再需要调用next方法
示例1：function* foo(){
	yield 1;
	yield 2;
	yield 3;
}
for(let v of foo){ document.write(v)} //1,2,3,4,5
示例2：利用generator和函数for...of循环，实现斐波那契数列的例子
function* fibonacci(){
	let [a,b] = [0,1];
	for(;;){
		[a,b] = [b,a+b];
		yield = b;
	}
}
for(let n of fibonacci()){ if(n>1000) break; document.write(n);}

4.throw方法
Generator函数内部还可以部署错误处理代码，捕获函数体外抛出的错误
function *gen(x){
	try{
		var y = yield x+2;
	}catch(e){
		document.write(e);
	}
	return y;
}
var g = gen(1);
g.next();
g,throw('出错了');
上面代码的最后一行，Generator函数体外，使用指针对象的throw方法抛出的错误，可以被函数体内的try...catch代码块捕获。
这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对异步编程无疑是很重要的

5.yield*语句
如果yield命令后面跟的是一个遍历器，需要在yield命令后面加上星号，表明他返回的是一个遍历器。这被称为yield*语句
其实yield关键字是一种以更直观，便捷的方式让我们创建用于遍历有限序列集合的迭代器，
而yield则用于将生成器的代码切片作为有限序列集合的元素

6.作为对象属性的Generator函数
如果一个对象的属性是Generator函数，可以简写成下面的形式。
let obj ={
	*foo(){
		
	}
}等同于
let obj = {
	foo: function*(){}
}