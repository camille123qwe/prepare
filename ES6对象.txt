一、对象

1.属性的简洁表达方式
function test(x,y){retrun {x,y}} //相当于return {x:x,y:y}; 这种方法用于函数的返回值非常方便
function test(){
	hello(){return "123" }//相当于 hello:function(){}
}

2.属性名表达式
let obj = {};
方法一：obj.foo = true; //直接使用标识符作为属性名
方法二：obj['a'+'bc'] = 123//使用表达式作为属性名，将表达式放在方括号内
使用字面量方式定义对象，在ES5中只能使用标识符定义属性，ES6允许用表达式作为对象的属性名
示例：
let propKey = "foo";
let obj ={
	[propKey]:true,
	['a'+'bc']:123
}
表达式还可以用于定义方法名
let obj ={
	['he'+'llo'](){return hi}
}

3.Object.is()用来比较两个值是否严格相等 与严格比较运算符的差别是 -0不等于+0 ;NaN等于NaN

4.Object.assign方法是将源对象（source）的所有可枚举属性，复制到目标对象（target）。他至少需要两个对象作为参数
第一个参数是目标对象，后面的参数是源对象。只要有一个参数不是对象，就会抛出TypeError错误
如果目标对象和源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性
实例：
var target = {a:1}; var source = {b:2,c:3,a:4} ; Object.assign(target,source) //target = {a:4,b:2,c:3}

5.proto属性，用来读取或设置当前对象的prototype对象，该属性一度被写入ES6草案，但后来又被移除。目前，所有浏览器都部署了这个属性
es6的写法
var obj = {
	_proto_:someOtherObj,method:function(){}
}
es5的写法
var obj = Object.create(someOtherObj); obj.method = function(){}

6.Symbol类型
ES6引入了一种新的原始数据类型Symbol，表示独一无二的ID。
凡是属性名为Symbol类型，就都是独一无二的，可以保证不会与其他属性名产生冲突
let s = Symbol(); typeof s //symbol
Symbol函数前不能使用new 命令，否则会报错，因为生成的Symbol是一个原始类型的值，不是对象。
Symbol类型的值不能与其他类型的值进行运算，否则会报错
但是，Symbol类型的值可以转换为字符串
var sym = Symbol("My Symbol");
String(sym)//'Symbol(My symbol)' sym.toString()//'Symbol(My symbol)'

7.内置代理
Proxy内置的一个代理工具，使用他可以在对象处理上加一层屏障：
ES6原生提供Proxy构造函数，用来生成Proxy实例
var Proxy = new Proxy(target,handler)// target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为
示例：
var plain = {name:"chenkaixin"};
var proxy = new Proxy(plain,{
	get:function(target,property){
		retrun property in target ?target[property] :"汇智网"
	}
});
property.name //"hubwiz" ; proxy.title //"汇智网"

Proxy(target, handler), 这里的 handler有如下的方法：
get(target, propKey, receiver)：拦截对象属性的读取，比如proxy.foo和proxy['foo']，返回类型不限。最后一个参数receiver可选，当target对象设置了propKey属性的get函数时，receiver对象会绑定get函数的this对象。
set(target, propKey, value, receiver)：拦截对象属性的设置，比如proxy.foo = v或proxy['foo'] = v，返回一个布尔值。
has(target, propKey)：拦截propKey in proxy的操作，返回一个布尔值。
deleteProperty(target, propKey) ：拦截delete proxy[propKey]的操作，返回一个布尔值。
enumerate(target)：拦截for (var x in proxy)，返回一个遍历器。
hasOwn(target, propKey)：拦截proxy.hasOwnProperty('foo')，返回一个布尔值。
ownKeys(target)：拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)，返回一个数组。该方法返回对象所有自身的属性，而Object.keys()仅返回对象可遍历的属性。
getOwnPropertyDescriptor(target, propKey) ：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。
defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。
preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值。
getPrototypeOf(target) ：拦截Object.getPrototypeOf(proxy)，返回一个对象。
isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值。
setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。
如果目标对象是函数，那么还有两种额外操作可以拦截。

apply(target, object, args)：拦截Proxy实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。
construct(target, args, proxy)：拦截Proxy实例作为构造函数调用的操作，比如new proxy(...args)。