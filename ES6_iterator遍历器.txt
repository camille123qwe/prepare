遍历器
1,Iterator(遍历器)的概念
遍历器(Iterator)就是统一的接口机制，来处理不同的数据结构。
iterator的作用有三个：
一是为各种数据结构，提供一个统一的、简便的访问接口；
二是使得数据结构的成员能够按照某种次序排列；
三是ES6创造了一种新的遍历命令for...of循环,Iterator接口主要供for...of消费
Iterator的遍历过程是这样的。
创建一个指针，指向当前数据结构的起始位置，也就是说，遍历器的返回值是一个指针对象
第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员；
第二次调用指针对象的next方法，可以将指针指向数据结构的第二个成员；
调用指针对象的next方法，直到它指向数据结构的结束位置
每一次调用next方法，都会返回当前成员的信息，具体来说，就是返回一个包含value和done两个属性的对象
其中，value是当前成员的值，done属性是一个布尔值，表示遍历是否结束

2.数据结构默认的Iterator接口
在ES6中,可迭代数据结构都必须实现一个名为Symbol.iterator的方法，
该方法返回一个该结构元素的迭代器。注意，Symbol.iterator是一个Symbol,Symbol是ES6新加入的原始值类型
示例：
let arr=['a','b','c'];
let iter = arr[Symbol.iterator]；
iter.next()//{value:'a',done: false}
上面代码中，变量arr是一个数组，原生就具有遍历器接口，部署在Symbol.iterator属性上。调用这个属性，就得到遍历器

3.调用Iterator接口的场合
有一些场合会默认调用iterator接口（即Symbol.iterator方法），除了下文会介绍的for...of循环，还有其他的场合
解构赋值
对数组和Set结构进行解构赋值时，会默认调用iterator接口
let set=new Set().add('a').add('b').add('c');
let [x,...y] = set //x = ’a‘,y= ['b','c']
扩展运算符
扩展运算符也会调用默认的iterator接口
例1：
var str = ’hello‘;
[...str] = ["h", "e", "l", "l", "o"]；
其他场合
yield* /Array.from()/Map(),Set(),WeakMap(),WeakSet()/Promise.all(),Promise.race()

4.原生具备的Iterator接口的数据结构
字符串是一个类似数组的对象，也具有Iterator接口。
var str = ’hello‘;
typeof(str[Symbol.iterator]) //function
var iterator = str[Symbol.iterator]();
iterator.next() //'h'
上面代码中，调用Symbol.iterator方法返回一个遍历器，在这个遍历器上可以调用next方法，实现对字符串的遍历
可以覆盖原生的Symbo.iterator方法，达到修改遍历器行为的目的
str[Symbol.iterator] = function(){
	return {
		next:function(){
			if(this._first){
				this._first = false;
				return {value:"bye",done:false};
			}else{
				return {done:true};
			}
		},
		_first:true
	};
};
[...str] //'bye'

5.Iterator接口与Generator函数
Symbol.iterator方法的最简单实现，需要使用Generator函数
var object = {};
object[Symbol.iterator] = function*(){
	yield 1;
	yield 2;
}
[...object] //[1,2]
简洁写法
let obj = {
	*[Symbol.iterator](){
		yield 'hello';
		yield 'world';
	}
}
for(let x of obj){ document.write(x)} //hello world

6.遍历器的return() ,throw()
遍历器返回的指针对象除了具有next()方法，还可以具有return方法和throw方法。其中next()方法是必须部署的
return 和throw方法是否部署是可选的
return方法使用的场合是，如果for...of 循环提前退出（通常是因为出错，或者有break语句或者continue语句）,就会调用return方法
如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法。
throw方法主要是配合Generator函数使用，一般的遍历器用不到这个方法

7.for...of循环
