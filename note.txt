封装
私有属性,公有方法
Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。
我们可以把那些不变的属性和方法，直接定义在prototype对象上。
1.isPrototypeOf()
这个方法用来判断，某个proptotype对象和某个实例之间的关系。
(Cat.prototype.isPrototypeOf(cat1)); //true
2.hasOwnProperty() ,用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。
(cat1.hasOwnProperty("name")); // true
in 运算符
优点：第一便于到处重复使用，
第二对内部部件有一个完整性的包括，
第三，把所有的东西封装起来，只留下若干个接口，便于使用维护。

继承
1.原型链继承
将父类的实例作为子类的原型来继承
特点：
非常纯粹的继承关系，实例是子类的实例，也是父类的实例
父类新增原型方法/原型属性，子类都能访问到
简单，易于实现
缺点：
要想为子类新增属性和方法，必须要在new Animal()这样的语句之后执行，不能放到构造器中
无法实现多继承
来自原型对象的引用属性是所有实例共享的
创建子类实例时，无法向父类构造函数传参数
2.call和apply （参数是数组），改变某个函数运行时上下文this的指向

单页应用 SPA
利用 JavaScript 动态的变换HTML的内容，从而实现UI与用户的交互。由于避免了页面的重新加载，SPA 可以提供较为流畅的用户体验。
1、优点：
1).良好的交互体验
用户不需要重新刷新页面，获取数据也是通过Ajax异步获取，页面显示流畅。
2).良好的前后端工作分离模式
单页Web应用可以和RESTful规约一起使用，通过REST API提供接口数据，并使用Ajax异步获取，这样有助于分离客户端和服务器端工作。更进一步，可以在客户端也可以分解为静态页面和页面交互两个部分。
3).减轻服务器压力
服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍；
4).共用一套后端程序代码
不用修改后端程序代码就可以同时用于Web界面、手机、平板等多种客户端；
2、缺点：
1).SEO难度较高
由于所有的内容都在一个页面中动态替换显示，所以在SEO上其有着天然的弱势，所以如果你的站点对SEO很看重，且要用单页应用，那么就做些静态页面给搜索引擎用吧。
2).前进、后退管理
由于单页Web应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理，当然此问题也有解决方案，比如利用URI中的散列+iframe实现。
3).初次加载耗时多
为实现单页Web应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS统一加载，部分页面可以在需要的时候加载。所以必须对JavaScript及CSS代码进行合并压缩处理，
如果使用第三方库，建议使用一些大公司的CDN，因此带宽的消耗是必然的。

闭包
闭包就是将函数内部和函数外部连接起来的一座桥梁
局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。

angular 
ngIf ngFor

ionic2的优势和不足
Ionic 2基于Angular 2进行构建，angular2采用了ts进行开发，ts提供了静态类型、 Lambda表达式、接口等先进的概念，可以说是面向对象的 JavaScript。
1.angular2的性能更快，angular2的应用是模块化的，项目结构更清晰page:ts,html,css,每个页面的代码、模板、样式都放在一块，意义非常清晰。
2.更强的命令行界面 CLI commondLIne interface
3.更友好的页面导航 this.nav.push(SecondPage);使用全新的NavController组件，导航栈的操作方式更加方便，实现前进、后退等功能就像操作数组那么简单。
4.Angular 2的模板语法刚接触时可能会觉得有点难以上手，但熟悉之后就能够更加灵活的控制单向绑定、双向绑定、事件绑定等各种功能。
5.基于 TypeScript，使用 Ionic 2 拥有更好的开发体验，支持类、模块、接口、lambda表达式等新的特性。
6.因为最终还是要依靠 Cordova 进行打包，因此不可避免的会遇到所有 Cordova 类跨平台应用面临的问题，在某些性能较差的移动设备上渲染速度较慢。
Ionic 2 已经明确提出不支持低版本 Android 设备，并且在 Angular 2正式版发布以后，支持 AoT 编译也会在一定程度上优化 App 性能。


